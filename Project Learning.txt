############ MINI MICROSERVICE APP ##############

Here in this application a user can create posts and can comment on posts. So we can divide our application into 3 main parts ::

(a). React application (frontend)
(b). Express application for "Posts" service (backend)
(c). Express application for "Comments" service (backend)

We will use "async" way of communication between these 2 microservices.

Here right now ::

1. "/posts/*" service is to deal with post get and creation and "/posts/:id/comments" is to deal with comment get and creation for a post but there is a problem

2. For eveyr post we are making an additional api call to get comment so if there are 10 posts so 10 api call to get comment of each post which is very inefficient, We can solve this using sync-communication between microservice but accessing database of comment in post micorservice but then no concept of micorservice here so we will rely on async communication in microservice

3. Now we will create an event bus that will take care of dealing with event like post creation, comment creation, pub-sub model and another query micorservice to solve the problem of inefficient way of getting comments. To understand more watch :: "https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/19099040#overview"

4. Here there are different implementations of "EVENT BUS" available like rabbitMQ, kafka, NATS etc but for learning purpose we will build our own from scratch, To understand mode watch :: https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/19099052#overview

5. Here when emiting event "PostCreated" and "CommentCreated" event the /post and /comment microservices does not care about it each other event it is only the /query micorservice which care about event, As the goal of query service is to get all the post with all comments of each post rather than making seprate api call to get comments for each post. 

6. Here even if /post and /comment service is not working still the /query service can serve the data from its database and my application some features is in working state because all microservice are independent of each other. 

7. Now we are building a feature in our app when if a comment contain word "orange" then we will moderate that commment to status either "approved", "pending" and "rejected", So comment model contain new propertry. Now building these features are easy in monolith application but in micorservices design it is quite difficult. Though it is very easy to implement this feature in comment service but still we will create a moderation service for learning purpose 

8. Now for above feature every comment has a new propertry called "status" with value either "Approved", "Rejected" and "Pending". 

9. Now there are multiple way to implement the above feature ::

  (a). Option-1 => /comment service emit an event "CommentCreated" when comment is created and now only /moderation service care about this event and not /query service. The /moderation service based on content of comment decide wether to approve or reject and then emit an event "CommentModerated" which now /query service care about to update its db. The -ve side of this approach is there is a delay between a user submited the comment and that comment is persisted by the query service but the comment can have a pending status as well and at some point in time in future can have a different status as well. Right now our assumption is that the /moderation service is instant in nature but in future may be we can have a human takes decision on whether to moderate a comment or not which is not instant in nature. While /moderation service taking time to moderate the comment the user will not be shown the comment because event from /moderate service is not emitted for /query service to work. 

  @@@@ NOTE :: This idea of user making the change and not seeing the result immediately is something that comes a lot in idea of microservices @@@@

  (b). Option-2 => /comment service again emit "CommentCreated" event which is now processed by both /moderation and /query service. The /query service will immediately show the newly created comment with status as pending and /moderation service is working on that comment behind the scene. The /moderation service will then after some time emit the "CommentModerated" event which is then processed by /query service to update the status of that comment either "approved" and "rejected".

  But there is one common issue in both the options, The /query service is a presentation logic which serves the data very quickly to the user. Right now /query service care about only 2 resources "posts" and "comments" but in future it can have other resources as well like "upvotes" , "downvotes", "images" etc, Since query service is just to query and send data quickly to the user it does not make sense for /query service to know how to process precise update like "CommentModerated" event to update the comment. Right now it is small event but in real-world commenting there can be multiple event for updating a comment in which case /query service will end up handling many event in it. 

  (c). Option-3 => Now /comment service is in complete incharge of dealing with comments like how to create, delete, update and anything related to comment. So now /comment service will handle the "CommentModerated" event emitted by the /moderation service and then /comment servic emit a single generic event for /query service which is "CommentUpdated" event which tells query service just take the updated event and put it in db without care about the logic behind the scene.  

  So we will use "Option-3"  

10. There is one issue in our current app which is what will happen if any of our service goes down. Lets say after some time the /moderation service goes down due to which if any of the event at that time was emitted they will not be received in /moderation service. Right now there is no way to get the lost events. 

Another issue is lets say we dont created /query service but after some years when /comment and /post service is working, So in thise case how to sync the data present in /comment and /post db in /query service db. 

To solve this 2 issues we have 3 way :

 (a). Option-1 => /comment and /post service is running throughout the lifetime of the app and after 1 year the /query service comes to the picture so it sync it with the db we will make direct http request from /query service to /post and /comment to get the data from their db and sync it in .query. The -ve side of this approach is we are making syncronous communication in which have to write some code in /post and /comment to fetch all the data from their db which in a typical app we dont create such endpoints. 

 (b). Option-2 => Giving direct access to db of /post and /comment instead of making syncronous http request. The -ve side of this approach is now /query service has to write code to interact with db of both /post and /comment which is a lot of codde to write if both of the db is different. 

 (c). Option-3 => Here the /query service will work if it has access to all the events that had been emitted in the past. So the event emited by /post and /comment if /query has access to them it will work just fine. So whenever any event comes to event-bus so apart from sending it to all the micorservices it will also going to store it internally in some even-bus data-store. 

 In real-world events are stored in some db rather than in memory and if we think again that these events can be too much to store so again the storage in modern world is very cheap. 

 Whenever any service like /query comes online it will 1st fetch all the events stored in event-bus 

 If we think that storing events is a inefficient way then trust me "THIS IS HOW REAL WORLD MICROSERVICES WORKS AND THIS IS HOW PEOPLE IMPLEMENT IT"

11. Now based on option-3 above we will put our /query service down and create post and comment, Then launch our /query service to see if it can reach our event-bus to get all the event occured before it is started. Here our implementations of event-bus is kind of similar to real world production ready event-bus but never use this event-bus for production app.

12. 